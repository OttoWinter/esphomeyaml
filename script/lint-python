#!/usr/bin/env python

from __future__ import print_function

import argparse
import collections
import os
import re
import sys

sys.path.append(os.path.dirname(__file__))
from helpers import basepath, get_output, walk_files, filter_changed


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('files', nargs='*', default=[],
                        help='files to be processed (regex on path)')
    parser.add_argument('-c', '--changed', action='store_true',
                        help='Only run on changed files')
    args = parser.parse_args()

    files = []
    for path in walk_files(basepath):
        filetypes = ('.py',)
        ext = os.path.splitext(path)[1]
        if ext in filetypes:
            path = os.path.relpath(path, os.getcwd())
            files.append(path)
    # Match against re
    file_name_re = re.compile('|'.join(args.files))
    files = [p for p in files if file_name_re.search(p)]

    if args.changed:
        files = filter_changed(files)

    files.sort()

    errors = collections.defaultdict(list)
    cmd = ['flake8'] + files
    print("Running flake8...")
    log = get_output(*cmd)
    for line in log.splitlines():
        line = line.split(':')
        if len(line) < 4:
            continue
        file_ = line[0]
        linno = line[1]
        msg = (u':'.join(line[3:])).strip()
        errors[file_].append(u'{}:{} - {}'.format(file_, linno, msg))

    cmd = ['pylint', '-f', 'parseable', '--persistent=n'] + files
    print("Running pylint...")
    log = get_output(*cmd)
    for line in log.splitlines():
        line = line.split(':')
        if len(line) < 3:
            continue
        file_ = line[0]
        linno = line[1]
        msg = (u':'.join(line[3:])).strip()
        errors[file_].append(u'{}:{} - {}'.format(file_, linno, msg))

    for f, errs in sorted(errors.items()):
        print("\033[0;32m************* File \033[1;32m{}\033[0m".format(f))
        for err in errs:
            print(err)
    print()

    sys.exit(len(errors))


if __name__ == '__main__':
    main()
